# -*- coding: utf-8 -*-
"""EM3_projekt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WJCa1eB1b_36XWAsdQWe3wg715SiLQ4i
"""

!pip install mne==1.8.0 # installing the MNE toolbox

# Commented out IPython magic to ensure Python compatibility.
# Import libraries
import numpy as np
import pandas as pd
import pickle
import mne
import os
import ipywidgets as widgets
import matplotlib.pyplot as plt
# %matplotlib inline
# set size of raw browser
mne.utils.config.set_config('MNE_BROWSE_RAW_SIZE','16.0,8.0')

# Create function to browse raw data
def inspect_raw(craw,start, chan_sel,nchan=10,time_step=2):
    order = np.arange(nchan, dtype = int) + int(nchan*(chan_sel-1))
    order = order[order < len(raw.ch_names)]
    cfig = craw.plot(events = events, start = start, duration = time_step,
                     order = order,show_scrollbars = False)

def raw_interact(craw, time_step = 2, nchan = 10):
    _ = widgets.interact(inspect_raw,
                     craw = widgets.fixed(craw),
                     nchan = widgets.fixed(nchan),
                     time_step = widgets.fixed(time_step),
                     start = widgets.FloatSlider(value = 0,min = 0,max = raw.times[-1], step = time_step, description = 'time'),
                     chan_sel = widgets.FloatSlider(value = 1, min = 1,step = 1, max = int(np.ceil(len(raw.ch_names)/nchan)),description = 'chan group'))

#download data
from google.colab import drive
drive.mount('/content/drive')

#csv file
csv_path = '/content/drive/MyDrive/n400/timestamps.csv'
df = pd.read_csv(csv_path, decimal=',')
#eeg data
eeg_folder = '/content/drive/MyDrive/n400/'

# Define a dictionary to load all raw EEG files
file_names = {
    'bilhus': 'Subj001_bilhus.bdf',
    'H2': 'Subj001_H2.bdf',
    'H1': 'Subj001_hist1.bdf',
    'H3': 'Subj001_hist3.bdf',
    'kopnøgle': 'Subj001_kopnøgle.bdf',
    'lampestol': 'Subj001_lampestol.bdf'
}

raw_data = {}
for label, file in file_names.items():
    print(f"Loading {file}...")
    raw = mne.io.read_raw_bdf(eeg_folder + file, eog=['EXG1', 'EXG2', 'EXG3', 'EXG4', 'EXG5', 'EXG6', 'EXG7', 'EXG8'], preload=True)
    raw_data[label] = raw

#definer her hvilken fil vi gerne vil kigge på
raw = raw_data['lampestol']

#filtrer csv filen
df = df[df['file_name'] == 'Subj001_lampestol'].copy()

print(raw)
print(raw.ch_names)
print(raw.info['sfreq'])
print(raw.get_data().shape)

raw = raw.set_montage('biosemi64')
fig = raw.get_montage().plot(show=False)

events_from_stim = mne.find_events(raw, stim_channel='Status', shortest_event=1)
trigger_sample = events_from_stim[0, 0]  # First trigger (sound start)
sfreq = raw.info['sfreq']

#raw_interact(raw,time_step=10,nchan=20)

raw_filtered = raw.copy().filter(l_freq = 1, h_freq = 40)

#raw_interact(raw_filtered,time_step=10,nchan=20)

raw_filtered = raw_filtered.set_eeg_reference('average')

raw_filtered = raw_filtered.resample(256)

events1 = mne.find_events(raw_filtered)
events1

start_trigger = events1[events1[:, 2] == 1][0, 0]
start_trigger

words = df['word'].unique().tolist()
sfreq = raw_filtered.info['sfreq']

df['sample'] = (df['onset_time'] * sfreq + start_trigger).astype(int)


df['word'] = df['word'].str.strip()
words = df['word'].unique().tolist()  # already done
word_to_id = {words[0]: 1, words[1]: 2}  # map first word to 1, second to 2
df['event_id'] = df['word'].map(word_to_id)
df = df[df['event_id'].notnull()].copy()
df['event_id'] = df['event_id'].astype(int)

events = df[['sample', 'event_id']].copy()
events['zero'] = 0  # MNE requires a dummy column in the middle
events = events[['sample', 'zero', 'event_id']].to_numpy().astype(int)

removed_rows = df[df['event_id'].isnull()]

events

ica = mne.preprocessing.ICA(random_state=97)

#sæt et seed så vi får konsekvente komponenter
ica.fit(raw_filtered.copy().pick('eeg'))

ica.plot_components() #0, 1

#ica.plot_sources(raw_filtered)

raw_ica = ica.apply(raw_filtered.copy(),exclude=[0, 1])

#raw_interact(raw_ica,time_step=10,nchan=20)

#raw_interact(raw_filtered,time_step=10,nchan=20)

"""###ERP

"""

#raw_ica_ph = raw_filtered.copy() #fjern denne når vi har lavet ica

event_id = words
event_id

tmin = -0.2
tmax = 0.8
baseline = (-.1,0)
event_id = word_to_id
epochs = mne.Epochs(raw_ica, tmin=tmin, tmax=tmax, events=events, event_id=event_id)
words

ERPs = {word: epochs[word].average() for word in words[0:2]}

fig1 = ERPs[words[0]].plot_topomap(times=np.arange(-.1,.8,.1),show=False)
fig1 = ERPs[words[1]].plot_topomap(times=np.arange(-.1,.8,.1),show=False)

mne.viz.plot_compare_evokeds([ERPs[words[0]], ERPs[words[1]]], picks='Pz')

mne.viz.plot_compare_evokeds([ERPs[words[0]], ERPs[words[1]]], picks='Cz')
