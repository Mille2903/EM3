# -*- coding: utf-8 -*-
"""Openscience3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hOSmWPvq0wpeZErw5RNgUP86M_afBNxH
"""

!pip install mne==1.8.0 # installing the MNE toolbox

# Commented out IPython magic to ensure Python compatibility.
# Import libraries
import numpy as np
import pickle
import mne
import os
import ipywidgets as widgets
import matplotlib.pyplot as plt
# %matplotlib inline
# set size of raw browser
mne.utils.config.set_config('MNE_BROWSE_RAW_SIZE','16.0,8.0')

from google.colab import drive
drive.mount('/content/drive')
import shutil
# Copy file from Google Drive to current working directory
shutil.copy('/content/drive/MyDrive/EEG3/12_N400.set', 'eeg.set')
shutil.copy('/content/drive/MyDrive/EEG3/12_N400.fdt', 'eeg.fdt')
shutil.copy('/content/drive/MyDrive/EEG3/sub-012_task-N400_events.tsv', 'events.tsv')

# List files to confirm
import os
print(os.listdir(os.getcwd()))

def inspect_raw(craw,start, chan_sel,nchan=10,time_step=2):
    order = np.arange(nchan, dtype = int) + int(nchan*(chan_sel-1))
    order = order[order < len(raw.ch_names)]
    cfig = craw.plot(events = events, start = start, duration = time_step,
                     order = order,show_scrollbars = False)

def raw_interact(craw, time_step = 2, nchan = 10):
    _ = widgets.interact(inspect_raw,
                     craw = widgets.fixed(craw),
                     nchan = widgets.fixed(nchan),
                     time_step = widgets.fixed(time_step),
                     start = widgets.FloatSlider(value = 0,min = 0,max = raw.times[-1], step = time_step, description = 'time'),
                     chan_sel = widgets.FloatSlider(value = 1, min = 1,step = 1, max = int(np.ceil(len(raw.ch_names)/nchan)),description = 'chan group'))

raw = mne.io.read_raw_eeglab('eeg.set', eog = ['HEOG_left', 'HEOG_right', 'VEOG_lower'], preload = True) # load the raw data
# Some EOG channels were recorded to track eye movements. Here we label them:
#raw.set_channel_types({ch: 'eog' for ch in raw.ch_names if 'EOG' in ch})
# Now we assign spatial electrode coordinates according to the 1020 system:
raw.rename_channels({'FP1': 'Fp1','FP2': 'Fp2'}) # rename to coincide with 1020 system
raw = raw.set_montage('biosemi64') # set the electrode positions (or montage)
raw_eeg = raw.copy().pick_types(eeg=True, eog=False)
fig = raw_eeg.get_montage().plot()

raw = mne.io.read_epochs_eeglab('eeg.set') # load the raw data
# Some EOG channels were recorded to track eye movements. Here we label them:
#raw.set_channel_types({ch: 'eog' for ch in raw.ch_names if 'EOG' in ch})
# Now we assign spatial electrode coordinates according to the 1020 system:
raw = raw.set_montage('standard_1005', on_missing = 'ignore') # set the electrode positions (or montage)
raw.rename_channels({'FP1': 'Fp1','FP2': 'Fp2'}) # rename to coincide with 1020 system
raw_eeg = raw.copy().pick_types(eeg=True, eog=False)
fig = raw_eeg.get_montage().plot()

raw_notch = raw.copy().notch_filter(60)
raw_filtered = raw_notch.copy().filter(l_freq=0.1, h_freq=40)

print(f'original sampling rate: {raw.info["sfreq"]}')
raw = raw.resample(256)
print(f'new sampling rate: {raw.info["sfreq"]}')

#print('events:\n',events,'\n\n')
events, event_id = mne.events_from_annotations(raw_filtered)
for e in events:
  print(e)
print('event_id:\n',event_id)

ica = mne.preprocessing.ICA()
ica.fit(raw_filtered.pick('eeg'))

ica.plot_components()

raw_ica = ica.apply(raw_filtered.copy(), exclude=[1,4,8,13,14 ])

raw_interact(raw_filtered, time_step=20,nchan=20) # Plot pca denoised
raw_interact(raw_ica, time_step=20,nchan=20) # Plot pca denoised

# Chunk the data into little pieces
tmin = -.2
tmax = .8
baseline = (-.1,0)
epochs = mne.Epochs(raw_ica, events=events, event_id=event_id, tmin=tmin, tmax=tmax, baseline=baseline, preload=True)
import numpy as np
from scipy.stats import zscore

# Then: Variance-based cleanup
data = epochs.get_data(picks='eeg')
z_var = zscore(np.var(data, axis=(1, 2)))
high_var_epochs = np.where(z_var > 3)[0]
epochs.drop(high_var_epochs, reason='high_variance')
print(epochs)

ERPs = {str(e): epochs[e].average() for e in event_id}
# Kombinér kongruente trials (211 og 212)
#epochs_congruent = mne.concatenate_epochs([epochs['211'], epochs['212']])

# Kombinér inkongruente trials (221 og 222)
#epochs_incongruent = mne.concatenate_epochs([epochs['221'], epochs['222']])


#ERPs = {
    #'Congruent': epochs_congruent.average(),
   # 'Incongruent': epochs_incongruent.average()
#}

# Choose Cz and crop to N400 window
electrode = 'CPz'
tmin_n400, tmax_n400 = -0.195, 0.700

# Get evoked ERPs (already averaged)
evoked_212 = ERPs['212'].copy().crop(tmin=tmin_n400, tmax=tmax_n400)
evoked_222 = ERPs['222'].copy().crop(tmin=tmin_n400, tmax=tmax_n400)
evoked_211 = ERPs['211'].copy().crop(tmin=tmin_n400, tmax=tmax_n400)
evoked_221 = ERPs['221'].copy().crop(tmin=tmin_n400, tmax=tmax_n400)

# Get data from CPz (Evoked data is shape: [n_channels, n_times])
cpz_data_212 = evoked_212.copy().pick(electrode).data[0]
cpz_data_222 = evoked_222.copy().pick(electrode).data[0]
cpz_data_211 = evoked_211.copy().pick(electrode).data[0]
cpz_data_221 = evoked_221.copy().pick(electrode).data[0]

# Calculate mean N400 amplitude over time window
mean_amp_212 = cpz_data_212.mean()
mean_amp_222 = cpz_data_222.mean()
mean_amp_211 = cpz_data_211.mean()
mean_amp_221 = cpz_data_221.mean()

# Save results
results = {'212': mean_amp_212, '222': mean_amp_222, '211': mean_amp_211, '221': mean_amp_221 }
print(results)

mne.viz.plot_compare_evokeds(
    ERPs,
    picks='Pz',  # vælg din elektrode (CPz, Cz, Pz etc.)
    colors={'Congruent': 'green', 'Incongruent': 'red'},
    title='ERP: Congruent vs Incongruent'
)

mne.viz.plot_compare_evokeds(
    ERPs,
    picks='CPz',  # vælg din elektrode (CPz, Cz, Pz etc.)
    colors={'Congruent': 'green', 'Incongruent': 'red'},
    title='ERP: Congruent vs Incongruent'
)

mne.viz.plot_compare_evokeds(
    ERPs,
    picks='Cz',  # vælg din elektrode (CPz, Cz, Pz etc.)
    colors={'Congruent': 'green', 'Incongruent': 'red'},
    title='ERP: Congruent vs Incongruent'
)

#211 = target,related to prime
#221 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['211'],ERPs['221']],picks=['Pz'])

#211 = target,related to prime
#221 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['211'],ERPs['221']],picks=['Cz'])

from scipy.stats import ttest_rel
import numpy as np

# Crop til N400-vindue
epochs_212_crop = epochs['211'].copy().crop(tmin=0.25, tmax=0.3)
epochs_222_crop = epochs['221'].copy().crop(tmin=0.25, tmax=0.3)

# Udtræk data fra CPz
data_212 = epochs_212_crop.get_data(picks='Cz')[:, 0, :]  # (n_trials, n_times)
data_222 = epochs_222_crop.get_data(picks='Cz')[:, 0, :]

# Beregn gennemsnitlig amplitude per trial
mean_212 = data_212.mean(axis=1)  # én værdi per trial
mean_222 = data_222.mean(axis=1)

# Match antal trials (for paired t-test)
n = min(len(mean_212), len(mean_222))
mean_212 = mean_212[:n]
mean_222 = mean_222[:n]

# Kør parret t-test
t_val, p_val = ttest_rel(mean_212, mean_222)

print(f"Gennemsnitlig amplitude i N400-vindue (CPz): p = {p_val:.4f}")

#211 = target,related to prime
#221 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['211'],ERPs['221']],picks=['CPz'])

from scipy.stats import ttest_rel
import numpy as np

# Crop til N400-vindue
epochs_212_crop = epochs['211'].copy().crop(tmin=0.25, tmax=0.3)
epochs_222_crop = epochs['221'].copy().crop(tmin=0.25, tmax=0.3)

# Udtræk data fra CPz
data_212 = epochs_212_crop.get_data(picks='CPz')[:, 0, :]  # (n_trials, n_times)
data_222 = epochs_222_crop.get_data(picks='CPz')[:, 0, :]

# Beregn gennemsnitlig amplitude per trial
mean_212 = data_212.mean(axis=1)  # én værdi per trial
mean_222 = data_222.mean(axis=1)

# Match antal trials (for paired t-test)
n = min(len(mean_212), len(mean_222))
mean_212 = mean_212[:n]
mean_222 = mean_222[:n]

# Kør parret t-test
t_val, p_val = ttest_rel(mean_212, mean_222)

print(f"Gennemsnitlig amplitude i N400-vindue (CPz): p = {p_val:.4f}")

#212 = target,related to prime
#222 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['212'],ERPs['222']],picks=['Cz'])

from scipy.stats import ttest_rel
import numpy as np

# Crop til N400-vindue
epochs_212_crop = epochs['212'].copy().crop(tmin=0.3, tmax=0.31)
epochs_222_crop = epochs['222'].copy().crop(tmin=0.3, tmax=0.31)

# Udtræk data fra CPz
data_212 = epochs_212_crop.get_data(picks='Cz')[:, 0, :]  # (n_trials, n_times)
data_222 = epochs_222_crop.get_data(picks='Cz')[:, 0, :]

# Beregn gennemsnitlig amplitude per trial
mean_212 = data_212.mean(axis=1)  # én værdi per trial
mean_222 = data_222.mean(axis=1)

# Match antal trials (for paired t-test)
n = min(len(mean_212), len(mean_222))
mean_212 = mean_212[:n]
mean_222 = mean_222[:n]

# Kør parret t-test
t_val, p_val = ttest_rel(mean_212, mean_222)

print(f"Gennemsnitlig amplitude i N400-vindue (CPz): p = {p_val:.4f}")

#212 = target,related to prime
#222 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['212'],ERPs['222']],picks=['Pz'])

from scipy.stats import ttest_rel
import numpy as np

# Crop til N400-vindue
epochs_212_crop = epochs['212'].copy().crop(tmin=0.24, tmax=0.25)
epochs_222_crop = epochs['222'].copy().crop(tmin=0.24, tmax=0.25)

# Udtræk data fra CPz
data_212 = epochs_212_crop.get_data(picks='Pz')[:, 0, :]  # (n_trials, n_times)
data_222 = epochs_222_crop.get_data(picks='Pz')[:, 0, :]

# Beregn gennemsnitlig amplitude per trial
mean_212 = data_212.mean(axis=1)  # én værdi per trial
mean_222 = data_222.mean(axis=1)

# Match antal trials (for paired t-test)
n = min(len(mean_212), len(mean_222))
mean_212 = mean_212[:n]
mean_222 = mean_222[:n]

# Kør parret t-test
t_val, p_val = ttest_rel(mean_212, mean_222)

print(f"Gennemsnitlig amplitude i N400-vindue (CPz): p = {p_val:.4f}")

#212 = target,related to prime
#222 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['212'],ERPs['222']],picks=['CPz'])

from scipy.stats import ttest_rel
import numpy as np

# Crop til N400-vindue
epochs_212_crop = epochs['212'].copy().crop(tmin=0.35, tmax=0.35)
epochs_222_crop = epochs['222'].copy().crop(tmin=0.35, tmax=0.35)

# Udtræk data fra CPz
data_212 = epochs_212_crop.get_data(picks='CPz')[:, 0, :]  # (n_trials, n_times)
data_222 = epochs_222_crop.get_data(picks='CPz')[:, 0, :]

# Beregn gennemsnitlig amplitude per trial
mean_212 = data_212.mean(axis=1)  # én værdi per trial
mean_222 = data_222.mean(axis=1)

# Match antal trials (for paired t-test)
n = min(len(mean_212), len(mean_222))
mean_212 = mean_212[:n]
mean_222 = mean_222[:n]

# Kør parret t-test
t_val, p_val = ttest_rel(mean_212, mean_222)

print(f"Gennemsnitlig amplitude i N400-vindue (CPz): p = {p_val:.4f}")

#212 = target,related to prime
#222 = target, unrelated to prime
mne.viz.plot_compare_evokeds([ERPs['212'],ERPs['222']],picks=['FCz'])

from scipy.stats import ttest_rel
import numpy as np

# Crop til N400-vindue
epochs_212_crop = epochs['212'].copy().crop(tmin=0.3, tmax=0.3)
epochs_222_crop = epochs['222'].copy().crop(tmin=0.3, tmax=0.3)

# Udtræk data fra CPz
data_212 = epochs_212_crop.get_data(picks='FCz')[:, 0, :]  # (n_trials, n_times)
data_222 = epochs_222_crop.get_data(picks='FCz')[:, 0, :]

# Beregn gennemsnitlig amplitude per trial
mean_212 = data_212.mean(axis=1)  # én værdi per trial
mean_222 = data_222.mean(axis=1)

# Match antal trials (for paired t-test)
n = min(len(mean_212), len(mean_222))
mean_212 = mean_212[:n]
mean_222 = mean_222[:n]

# Kør parret t-test
t_val, p_val = ttest_rel(mean_212, mean_222)

print(f"Gennemsnitlig amplitude i N400-vindue (CPz): p = {p_val:.4f}")